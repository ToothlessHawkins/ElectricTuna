using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Storage;
using Microsoft.Xna.Framework.GamerServices;
using System.Threading;
using System.IO;

namespace TestGame
{
    public enum ScreenState
    {
        Active,
        Hidden,
    }
    class GameScreen
    {
        // attributes
        ScreenManager screenManager;
        ScreenState screenState = ScreenState.Active;
        Boolean otherScreenHasFocus = false;
        PlayerIndex? controllingPlayer = PlayerIndex.One;
        bool isExiting = false;

        public ScreenManager ScreenManager
        {
            get { return screenManager; }
            internal set { screenManager = value; }
        }
    
        public ScreenState ScreenState
        {
            get { return screenState; }
            set { screenState = value; }
        }

        // checks whether the screen is active       
        public bool IsActive
        {
            get
            {
                return !otherScreenHasFocus && screenState == ScreenState.Active;
            }
        }

        // Checks whether the screen is going away for good (as opposed to
        // just being hidden, as may happen if we implement a pause menu)
        public bool IsExiting
        {
            get { return isExiting; }
            protected internal set { isExiting = value; }
        }

        // Get the controlling Player
        public PlayerIndex? ControllingPlayer
        {
            get { return controllingPlayer; }
            set { controllingPlayer = value; }
        }

        /// <summary>
        /// Now for all of the Game-type logic - initilization, update, and Draw
        /// </summary>
        public virtual void Initialize() { }

        /// <summary>
        /// Load graphics content for the screen.
        /// </summary>
        public virtual void LoadContent() { }


        /// <summary>
        /// Unload content for the screen.
        /// </summary>
        public virtual void UnloadContent() { }

        /// <summary>
        /// Allows the screen to run logic, such as updating the transition position.
        /// Unlike HandleInput, this method is called regardless of whether the screen
        /// is active or hidden
        /// </summary>
        public virtual void Update(GameTime gameTime, bool otherScreenHasFocus)
        {
            this.otherScreenHasFocus = otherScreenHasFocus;
            if (isExiting) screenManager.RemoveScreen(this);
        }

        /// <summary>
        /// Allows the screen to handle user input. Unlike Update, this method
        /// is only called when the screen is active, and not when some other
        /// screen has taken the focus.
        /// </summary>
        public virtual void HandleInput(GamePadState gPadState, PlayerIndex? player) { }

        /// <summary>
        /// This is called when the screen should draw itself.
        /// </summary>
        public virtual void Draw(GameTime gameTime) { }
    }
}
